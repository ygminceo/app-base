{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "SubscriptionCreateLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-dev-subscriptionCreate"
      }
    },
    "AuthorizeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-dev-authorize"
      }
    },
    "OtpCreateLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-dev-otpCreate"
      }
    },
    "SignInLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-dev-signIn"
      }
    },
    "BankLinkTokenGetLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-dev-bankLinkTokenGet"
      }
    },
    "BankAddLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-dev-bankAdd"
      }
    },
    "CardTokenGetLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-dev-cardTokenGet"
      }
    },
    "CardAddLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-dev-cardAdd"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "aws",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-dev*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "aws",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "SubscriptionCreateLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws/dev/1626103095344-2021-07-12T15:18:15.344Z/subscriptionCreate.zip"
        },
        "Handler": "src/services/landing/subscriptionCreate.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-dev-subscriptionCreate",
        "MemorySize": 128,
        "Timeout": 6,
        "Environment": {
          "Variables": {}
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SubscriptionCreateLogGroup"
      ]
    },
    "AuthorizeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws/dev/1626103095344-2021-07-12T15:18:15.344Z/authorize.zip"
        },
        "Handler": "src/services/authentication/authorize.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-dev-authorize",
        "MemorySize": 128,
        "Timeout": 6,
        "Environment": {
          "Variables": {}
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AuthorizeLogGroup"
      ]
    },
    "OtpCreateLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws/dev/1626103095344-2021-07-12T15:18:15.344Z/otpCreate.zip"
        },
        "Handler": "src/services/authentication/otpCreate.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-dev-otpCreate",
        "MemorySize": 128,
        "Timeout": 6,
        "Environment": {
          "Variables": {}
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "OtpCreateLogGroup"
      ]
    },
    "SignInLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws/dev/1626103095344-2021-07-12T15:18:15.344Z/signIn.zip"
        },
        "Handler": "src/services/authentication/signIn.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-dev-signIn",
        "MemorySize": 128,
        "Timeout": 6,
        "Environment": {
          "Variables": {}
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SignInLogGroup"
      ]
    },
    "BankLinkTokenGetLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws/dev/1626103095344-2021-07-12T15:18:15.344Z/bankLinkTokenGet.zip"
        },
        "Handler": "src/services/billing/bankLinkTokenGet.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-dev-bankLinkTokenGet",
        "MemorySize": 128,
        "Timeout": 6,
        "Environment": {
          "Variables": {}
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "BankLinkTokenGetLogGroup"
      ]
    },
    "BankAddLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws/dev/1626103095344-2021-07-12T15:18:15.344Z/bankAdd.zip"
        },
        "Handler": "src/services/billing/bankAdd.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-dev-bankAdd",
        "MemorySize": 128,
        "Timeout": 6,
        "Environment": {
          "Variables": {}
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "BankAddLogGroup"
      ]
    },
    "CardTokenGetLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws/dev/1626103095344-2021-07-12T15:18:15.344Z/cardTokenGet.zip"
        },
        "Handler": "src/services/billing/cardTokenGet.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-dev-cardTokenGet",
        "MemorySize": 128,
        "Timeout": 6,
        "Environment": {
          "Variables": {}
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CardTokenGetLogGroup"
      ]
    },
    "CardAddLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws/dev/1626103095344-2021-07-12T15:18:15.344Z/cardAdd.zip"
        },
        "Handler": "src/services/billing/cardAdd.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-dev-cardAdd",
        "MemorySize": 128,
        "Timeout": 6,
        "Environment": {
          "Variables": {}
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CardAddLogGroup"
      ]
    },
    "BankLinkTokenGetLambdaVersionqTvFZhA3p9DlRIHvQgbn9rGIieHkFjW9Pir3n2rK8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "BankLinkTokenGetLambdaFunction"
        },
        "CodeSha256": "ptfBZ1TI+RZqliB5Hb3Zn+QM7XakDdgtlSc6zk49Y5k="
      }
    },
    "CardAddLambdaVersionYm6XluYeMs3j9BQ13wYJe2Bp6vkFU33MGFsTqS08": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CardAddLambdaFunction"
        },
        "CodeSha256": "f1IXRMHIxw3B/vblNMhfpJF5nwyRtlcou/nv8woNueE="
      }
    },
    "CardTokenGetLambdaVersion9EVnkV2ehImNN6urqs3ymQON731YgtXwPd1H6Mdu3Q": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CardTokenGetLambdaFunction"
        },
        "CodeSha256": "HpOp2vrgAAZtYHMSEPexJZk3e54NyxTYQ9g42j5fnCs="
      }
    },
    "BankAddLambdaVersion3ISl5kzvmOyFLszpxw980K58omPiepP9DO14TpCdA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "BankAddLambdaFunction"
        },
        "CodeSha256": "qt+XclmJ7VYNt4cvi1cAMtNgwMqddRAE8SVGD5fex8I="
      }
    },
    "AuthorizeLambdaVersionrBYCevrGObilnrMUwj0puUrB19gsmWCdSLlo6i5S7MQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthorizeLambdaFunction"
        },
        "CodeSha256": "BzVH4FF7v41U6l5BsUdJ47Tv5Ngq24jUqA++ROOoNDU="
      }
    },
    "SubscriptionCreateLambdaVersionWBQWLyt4TsJkfmmw9zlYfUuJ2XNU43wPQFpZVPWJI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SubscriptionCreateLambdaFunction"
        },
        "CodeSha256": "d3+IBBv5U9Uz2ka4bM/Tex90xYw7NQzSP6yYvSfvMag="
      }
    },
    "OtpCreateLambdaVersionaQ421EjPoLn2dwZGhNWrNenKAEhdNSw8BIvXxm5P0AU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "OtpCreateLambdaFunction"
        },
        "CodeSha256": "71wkvqugIcKHn0CMud1XJ4FNZ4GXNnLpsYZPpHu7ev0="
      }
    },
    "SignInLambdaVersionVj2pmuQUq1tDUTjPjxyjMkBQRCXi4BxRIrKAgWOohZU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SignInLambdaFunction"
        },
        "CodeSha256": "ksFyG5/PgTMj7t5fHwcloerzDDpu5tS3veFKju7aOrY="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-aws",
        "ProtocolType": "HTTP",
        "CorsConfiguration": {
          "AllowHeaders": [
            "*"
          ],
          "AllowMethods": [
            "OPTIONS",
            "POST"
          ],
          "AllowOrigins": [
            "*"
          ]
        }
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "AuthorizeLambdaAuthorizerPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AuthorizeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiAuthorizerAuthorize": {
      "Type": "AWS::ApiGatewayV2::Authorizer",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "Name": "authorize",
        "IdentitySource": [
          "$request.header.Authorization"
        ],
        "AuthorizerType": "REQUEST",
        "AuthorizerResultTtlInSeconds": 0,
        "AuthorizerPayloadFormatVersion": "2.0",
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "AuthorizeLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "SubscriptionCreateLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SubscriptionCreateLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSubscriptionCreate": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SubscriptionCreateLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRoutePostApiLandingSubscriptioncreate": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/landing/subscriptionCreate",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSubscriptionCreate"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSubscriptionCreate"
    },
    "OtpCreateLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "OtpCreateLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationOtpCreate": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "OtpCreateLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRoutePostApiAuthenticationOtpcreate": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/authentication/otpCreate",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationOtpCreate"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationOtpCreate"
    },
    "SignInLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SignInLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSignIn": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SignInLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRoutePostApiAuthenticationSignin": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/authentication/signIn",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSignIn"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSignIn"
    },
    "BankLinkTokenGetLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "BankLinkTokenGetLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationBankLinkTokenGet": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "BankLinkTokenGetLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRoutePostApiBillingBanklinktokenget": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/billing/bankLinkTokenGet",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationBankLinkTokenGet"
              }
            ]
          ]
        },
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerAuthorize"
        }
      },
      "DependsOn": "HttpApiIntegrationBankLinkTokenGet"
    },
    "BankAddLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "BankAddLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationBankAdd": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "BankAddLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRoutePostApiBillingBankadd": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/billing/bankAdd",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationBankAdd"
              }
            ]
          ]
        },
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerAuthorize"
        }
      },
      "DependsOn": "HttpApiIntegrationBankAdd"
    },
    "CardTokenGetLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CardTokenGetLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCardTokenGet": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CardTokenGetLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRoutePostApiBillingCardtokenget": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/billing/cardTokenGet",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCardTokenGet"
              }
            ]
          ]
        },
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerAuthorize"
        }
      },
      "DependsOn": "HttpApiIntegrationCardTokenGet"
    },
    "CardAddLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CardAddLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCardAdd": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CardAddLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRoutePostApiBillingCardadd": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/billing/cardAdd",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCardAdd"
              }
            ]
          ]
        },
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerAuthorize"
        }
      },
      "DependsOn": "HttpApiIntegrationCardAdd"
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-aws-dev-ServerlessDeploymentBucketName"
      }
    },
    "BankLinkTokenGetLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "BankLinkTokenGetLambdaVersionqTvFZhA3p9DlRIHvQgbn9rGIieHkFjW9Pir3n2rK8"
      },
      "Export": {
        "Name": "sls-aws-dev-BankLinkTokenGetLambdaFunctionQualifiedArn"
      }
    },
    "CardAddLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CardAddLambdaVersionYm6XluYeMs3j9BQ13wYJe2Bp6vkFU33MGFsTqS08"
      },
      "Export": {
        "Name": "sls-aws-dev-CardAddLambdaFunctionQualifiedArn"
      }
    },
    "CardTokenGetLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CardTokenGetLambdaVersion9EVnkV2ehImNN6urqs3ymQON731YgtXwPd1H6Mdu3Q"
      },
      "Export": {
        "Name": "sls-aws-dev-CardTokenGetLambdaFunctionQualifiedArn"
      }
    },
    "BankAddLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "BankAddLambdaVersion3ISl5kzvmOyFLszpxw980K58omPiepP9DO14TpCdA"
      },
      "Export": {
        "Name": "sls-aws-dev-BankAddLambdaFunctionQualifiedArn"
      }
    },
    "AuthorizeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AuthorizeLambdaVersionrBYCevrGObilnrMUwj0puUrB19gsmWCdSLlo6i5S7MQ"
      },
      "Export": {
        "Name": "sls-aws-dev-AuthorizeLambdaFunctionQualifiedArn"
      }
    },
    "SubscriptionCreateLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SubscriptionCreateLambdaVersionWBQWLyt4TsJkfmmw9zlYfUuJ2XNU43wPQFpZVPWJI"
      },
      "Export": {
        "Name": "sls-aws-dev-SubscriptionCreateLambdaFunctionQualifiedArn"
      }
    },
    "OtpCreateLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "OtpCreateLambdaVersionaQ421EjPoLn2dwZGhNWrNenKAEhdNSw8BIvXxm5P0AU"
      },
      "Export": {
        "Name": "sls-aws-dev-OtpCreateLambdaFunctionQualifiedArn"
      }
    },
    "SignInLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SignInLambdaVersionVj2pmuQUq1tDUTjPjxyjMkBQRCXi4BxRIrKAgWOohZU"
      },
      "Export": {
        "Name": "sls-aws-dev-SignInLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-aws-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-aws-dev-HttpApiUrl"
      }
    }
  }
}